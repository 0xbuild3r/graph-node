initSidebarItems({"enum":[["Comparison",""],["FilterCollection","This is a parallel to `EntityCollection`, but with entity type names and filters translated in a form ready for SQL generation"],["ParentIds","A `ParentLink` where we’ve made sure for the `List` variant that each `Vec<Option<String>>` has the same length Use the provided constructors to make sure this invariant holds"],["ParentLimit","When we expand the parents for a specific query for children, we sometimes (aka interfaces) need to restrict them to a specific parent `q.id` that an outer query has already set up. In all other cases, we restrict the children to the top n by ordering by a specific sort key and limiting"],["SortKey","Convenience to pass the name of the column to order by around. If `name` is `None`, the sort key should be ignored"],["TableLink","An `EntityLink` where we’ve resolved the entity type and attribute to the corresponding table and column"]],"fn":[["_impl_queryable_by_name_for_conflictingentitydata",""],["_impl_queryable_by_name_for_copyvid",""],["_impl_queryable_by_name_for_entitydata",""],["_impl_queryable_by_name_for_returnedentitydata",""],["bytes_as_str","Convert Postgres string representation of bytes “\\xdeadbeef” to ours of just “deadbeef”."],["jsonb_build_object",""],["str_as_bytes",""],["write_column_names",""]],"struct":[["BASE_SQL_COLUMNS","Those are columns that we always want to fetch from the database."],["ClampRangeQuery","Reduce the upper bound of the current entry’s block range to `block` as long as that does not result in an empty block range"],["ConflictingEntityData",""],["ConflictingEntityQuery",""],["CopyEntityBatchQuery","Copy the data of one table to another table. All rows whose `vid` is in the range `[first_vid, last_vid]` will be copied"],["CopyVid","Helper struct for returning the id’s touched by the RevertRemove and RevertExtend queries"],["DeleteByPrefixQuery","Remove all entities from the given table whose id has a prefix that matches one of the given prefixes. This query is mostly useful to delete subgraph metadata that belongs to a certain dynamic data source"],["EntityData","Helper struct for retrieving entities from the database. With diesel, we can only run queries that return columns whose number and type are known at compile time. Because of that, we retrieve the actual data for an entity as Jsonb by converting the row containing the entity using the `to_jsonb` function."],["FilterQuery","The parallel to `EntityQuery`."],["FilterRange","Generate `[limit {first}] [offset {skip}]"],["FilterWindow","This is the parallel to `EntityWindow`, with names translated to the relational layout, and checked against it"],["FindManyQuery",""],["FindQuery",""],["InsertQuery",""],["ORDER_BY_BLOCK_RANGE","When we add `order by id` to a query should we add instead `order by id, block_range`"],["PrefixComparison","Produce a comparison between the string column `column` and the string value `text` that makes it obvious to Postgres’ optimizer that it can first consult the partial index on `left(column, STRING_PREFIX_SIZE)` instead of going straight to a sequential scan of the underlying table. We do this by writing the comparison `column op text` in a way that involves `left(column, STRING_PREFIX_SIZE)`"],["QueryFilter","A `QueryFilter` adds the conditions represented by the `filter` to the `where` clause of a SQL query. The attributes mentioned in the `filter` must all come from the given `table`, which is used to map GraphQL names to column names, and to determine the type of the column an attribute refers to"],["QueryValue","A `QueryValue` makes it possible to bind a `Value` into a SQL query using the metadata from Column"],["REVERSIBLE_ORDER_BY_OFF","Reversible order by. Change our `order by` clauses so that `asc` and `desc` ordering produce reverse orders. Setting this turns the new, correct behavior off"],["ReturnedEntityData","Helper struct for returning the id’s touched by the RevertRemove and RevertExtend queries"],["RevertClampQuery","A query that unclamps the block range of all versions that contain `block` by setting the upper bound of the block range to infinity."],["RevertRemoveQuery","A query that removes all versions whose block range lies entirely beyond `block`."],["SafeString","A string where we have checked that it is safe to embed it literally in a string in a SQL query. In particular, we have escaped any use of the string delimiter `'`."],["TYPEA_BATCH_SIZE","Use a variant of the query for child_type_a when we are looking up fewer than this many entities. This variable is only here temporarily until we can settle on the right batch size through experimentation and should then just become an ordinary constant"],["UnsupportedFilter",""]],"trait":[["ForeignKeyClauses","Conveniences for handling foreign keys depending on whether we are using `IdType::Bytes` or `IdType::String` as the primary key"],["FromColumnValue",""],["FromEntityData",""]]});