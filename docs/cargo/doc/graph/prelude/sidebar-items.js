initSidebarItems({"attr":[["async_trait",""]],"derive":[["Deserialize",""],["Serialize",""]],"enum":[["Async","Return type of future, indicating whether a value is ready or not."],["AsyncSink","The result of an asynchronous attempt to send a value to a sink."],["BigIntSign","A Sign is a `BigInt`’s composing element."],["PrometheusError","The error types for prometheus."],["QueryError","Error caused while processing a Query request."],["QueryExecutionError","Error caused while executing a Query."],["SubgraphVersionSwitchingMode",""],["SubscriptionError","Error caused while processing a Subscription request."]],"macro":[["Debug","Derive macro generating an impl of the trait `Debug`."],["anyhow","Construct an ad-hoc error from a string or existing non-`anyhow` error value."],["crit","Log critical level record"],["debug","Log debug level record"],["error","Log error level record"],["info","Log info level record"],["lazy_static",""],["o","Macro for building group of key-value pairs: `OwnedKV`"],["trace","Log trace level record"],["warn","Log warning level record"]],"mod":[["future","Futures"],["q",""],["s",""],["stream","Asynchronous streams"]],"struct":[["Arc","A thread-safe reference-counting pointer. ‘Arc’ stands for ‘Atomically Reference Counted’."],["BlockPtr","A block hash and block number from a specific Ethereum block."],["BlockState",""],["DataSourceTemplateInfo",""],["Duration","A `Duration` type to represent a span of time, typically used for system timeouts."],["Error","The `Error` type, a wrapper around a dynamic error type."],["EthereumBlock",""],["EthereumBlockWithCalls",""],["EthereumCall",""],["Histogram","A [`Metric`] counts individual observations from an event or sample stream in configurable buckets. Similar to a `Summary`, it also provides a sum of observations and an observation count."],["HistogramOpts","A struct that bundles the options for creating a [`Histogram`] metric. It is mandatory to set Name and Help to a non-empty string. All other fields are optional and can safely be left at their zero value."],["HostMetrics",""],["Logger","Logging handle used to execute logging statements"],["Opts","A struct that bundles the options for creating most [`Metric`] types."],["Pin","A pinned pointer."],["Query","A GraphQL query as submitted by a client, either directly or through a subscription."],["QueryResult","The result of running a query, if successful."],["QueryVariables","Variable values for a GraphQL query."],["Registry","A struct for registering Prometheus collectors, collecting their metrics, and gathering them into `MetricFamilies` for exposition."],["SerializableValue","Serializable wrapper around a GraphQL value."],["Subscription","A GraphQL subscription made by a client."]],"trait":[["Collector","An interface for collecting metrics."],["Debug","`?` formatting."],["FromIterator","Conversion from an [`Iterator`]."],["Future","Trait for types which are a placeholder of a value that may become available at some later point in time."],["Future01CompatExt","Extension trait for futures 0.1 `Future`"],["IntoFuture","Class of types which can be converted into a future."],["LightEthereumBlockExt",""],["RuntimeHost","Common trait for runtime host implementations."],["RuntimeHostBuilder",""],["Sink","A `Sink` is a value into which other values can be sent, asynchronously."],["Sink01CompatExt","Extension trait for futures 0.1 `Sink`"],["Stream","A stream of values, not all of which may have been produced yet."],["Stream01CompatExt","Extension trait for futures 0.1 `Stream`"],["SubgraphAssignmentProvider","Common trait for subgraph providers."],["SubgraphInstanceManager","A `SubgraphInstanceManager` loads and manages subgraph instances."],["SubgraphRegistrar","Common trait for subgraph registrars."],["TryFrom","Simple and safe type conversions that may fail in a controlled way under some circumstances. It is the reciprocal of [`TryInto`]."],["TryFromValue",""],["TryFutureExt","Adapters specific to [`Result`]-returning futures"],["TryStreamExt","Adapters specific to `Result`-returning streams"],["ValueMap",""]],"type":[["Counter","A [`Metric`] represents a single numerical value that only ever goes up."],["CounterVec","A [`Collector`] that bundles a set of [`Counter`]s that all share the same [`Desc`], but have different values for their variable labels. This is used if you want to count the same thing partitioned by various dimensions (e.g. number of HTTP requests, partitioned by response code and method)."],["DynTryFuture",""],["Gauge","A [`Metric`] represents a single numerical value that can arbitrarily go up and down."],["GaugeVec","A [`Collector`] that bundles a set of [`Gauge`]s that all share the same [`Desc`], but have different values for their variable labels. This is used if you want to count the same thing partitioned by various dimensions (e.g. number of operations queued, partitioned by user and operation type)."],["HistogramVec","A [`Collector`] that bundles a set of Histograms that all share the same [`Desc`], but have different values for their variable labels. This is used if you want to count the same thing partitioned by various dimensions (e.g. HTTP request latencies, partitioned by status code and method)."],["LightEthereumBlock",""],["Poll","Return type of the `Future::poll` method, indicates whether a future’s value is ready or not."],["QueryResultStream","A stream of query results for a subscription."],["StartSend","Return type of the `Sink::start_send` method, indicating the outcome of a send attempt. See `AsyncSink` for more details."],["SubscriptionResult","The result of running a subscription, if successful."]]});