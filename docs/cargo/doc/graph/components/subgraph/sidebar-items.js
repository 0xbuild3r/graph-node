initSidebarItems({"enum":[["MappingError",""],["ProofOfIndexingEvent",""],["SubgraphVersionSwitchingMode",""]],"mod":[["host",""],["instance",""],["instance_manager",""],["proof_of_indexing",""],["provider",""],["registrar",""]],"struct":[["BlockEventStream",""],["BlockState",""],["DataSourceTemplateInfo",""],["HostMetrics",""],["ProofOfIndexing",""],["ProofOfIndexingFinisher",""]],"trait":[["RuntimeHost","Common trait for runtime host implementations."],["RuntimeHostBuilder",""],["SubgraphAssignmentProvider","Common trait for subgraph providers."],["SubgraphInstanceManager","A `SubgraphInstanceManager` loads and manages subgraph instances."],["SubgraphRegistrar","Common trait for subgraph registrars."]],"type":[["SharedProofOfIndexing","This concoction of types is to allow MappingContext to be static, yet still have shared mutable data for derive_with_empty_block_state. The static requirement is so that host exports can be static for wasmtime. AtomicRefCell is chosen over Mutex because concurrent access is intentionally disallowed - PoI requires sequential access to the hash function within a given causality region even if ownership is shared across multiple mapping contexts."]]});